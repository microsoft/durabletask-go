// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: orchestrator_service.proto

package protos

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskHubSidecarService_Hello_FullMethodName                     = "/TaskHubSidecarService/Hello"
	TaskHubSidecarService_StartInstance_FullMethodName             = "/TaskHubSidecarService/StartInstance"
	TaskHubSidecarService_GetInstance_FullMethodName               = "/TaskHubSidecarService/GetInstance"
	TaskHubSidecarService_RewindInstance_FullMethodName            = "/TaskHubSidecarService/RewindInstance"
	TaskHubSidecarService_WaitForInstanceStart_FullMethodName      = "/TaskHubSidecarService/WaitForInstanceStart"
	TaskHubSidecarService_WaitForInstanceCompletion_FullMethodName = "/TaskHubSidecarService/WaitForInstanceCompletion"
	TaskHubSidecarService_RaiseEvent_FullMethodName                = "/TaskHubSidecarService/RaiseEvent"
	TaskHubSidecarService_TerminateInstance_FullMethodName         = "/TaskHubSidecarService/TerminateInstance"
	TaskHubSidecarService_SuspendInstance_FullMethodName           = "/TaskHubSidecarService/SuspendInstance"
	TaskHubSidecarService_ResumeInstance_FullMethodName            = "/TaskHubSidecarService/ResumeInstance"
	TaskHubSidecarService_QueryInstances_FullMethodName            = "/TaskHubSidecarService/QueryInstances"
	TaskHubSidecarService_PurgeInstances_FullMethodName            = "/TaskHubSidecarService/PurgeInstances"
	TaskHubSidecarService_GetWorkItems_FullMethodName              = "/TaskHubSidecarService/GetWorkItems"
	TaskHubSidecarService_CompleteActivityTask_FullMethodName      = "/TaskHubSidecarService/CompleteActivityTask"
	TaskHubSidecarService_CompleteOrchestratorTask_FullMethodName  = "/TaskHubSidecarService/CompleteOrchestratorTask"
	TaskHubSidecarService_CompleteEntityTask_FullMethodName        = "/TaskHubSidecarService/CompleteEntityTask"
	TaskHubSidecarService_CreateTaskHub_FullMethodName             = "/TaskHubSidecarService/CreateTaskHub"
	TaskHubSidecarService_DeleteTaskHub_FullMethodName             = "/TaskHubSidecarService/DeleteTaskHub"
	TaskHubSidecarService_SignalEntity_FullMethodName              = "/TaskHubSidecarService/SignalEntity"
	TaskHubSidecarService_GetEntity_FullMethodName                 = "/TaskHubSidecarService/GetEntity"
	TaskHubSidecarService_QueryEntities_FullMethodName             = "/TaskHubSidecarService/QueryEntities"
	TaskHubSidecarService_CleanEntityStorage_FullMethodName        = "/TaskHubSidecarService/CleanEntityStorage"
)

// TaskHubSidecarServiceClient is the client API for TaskHubSidecarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskHubSidecarServiceClient interface {
	// Sends a hello request to the sidecar service.
	Hello(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Starts a new orchestration instance.
	StartInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
	// Gets the status of an existing orchestration instance.
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	// Rewinds an orchestration instance to last known good state and replays from there.
	RewindInstance(ctx context.Context, in *RewindInstanceRequest, opts ...grpc.CallOption) (*RewindInstanceResponse, error)
	// Waits for an orchestration instance to reach a running or completion state.
	WaitForInstanceStart(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	// Waits for an orchestration instance to reach a completion state (completed, failed, terminated, etc.).
	WaitForInstanceCompletion(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	// Raises an event to a running orchestration instance.
	RaiseEvent(ctx context.Context, in *RaiseEventRequest, opts ...grpc.CallOption) (*RaiseEventResponse, error)
	// Terminates a running orchestration instance.
	TerminateInstance(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error)
	// Suspends a running orchestration instance.
	SuspendInstance(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*SuspendResponse, error)
	// Resumes a suspended orchestration instance.
	ResumeInstance(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeResponse, error)
	QueryInstances(ctx context.Context, in *QueryInstancesRequest, opts ...grpc.CallOption) (*QueryInstancesResponse, error)
	PurgeInstances(ctx context.Context, in *PurgeInstancesRequest, opts ...grpc.CallOption) (*PurgeInstancesResponse, error)
	GetWorkItems(ctx context.Context, in *GetWorkItemsRequest, opts ...grpc.CallOption) (TaskHubSidecarService_GetWorkItemsClient, error)
	CompleteActivityTask(ctx context.Context, in *ActivityResponse, opts ...grpc.CallOption) (*CompleteTaskResponse, error)
	CompleteOrchestratorTask(ctx context.Context, in *OrchestratorResponse, opts ...grpc.CallOption) (*CompleteTaskResponse, error)
	CompleteEntityTask(ctx context.Context, in *EntityBatchResult, opts ...grpc.CallOption) (*CompleteTaskResponse, error)
	// Deletes and Creates the necessary resources for the orchestration service and the instance store
	CreateTaskHub(ctx context.Context, in *CreateTaskHubRequest, opts ...grpc.CallOption) (*CreateTaskHubResponse, error)
	// Deletes the resources for the orchestration service and optionally the instance store
	DeleteTaskHub(ctx context.Context, in *DeleteTaskHubRequest, opts ...grpc.CallOption) (*DeleteTaskHubResponse, error)
	// sends a signal to an entity
	SignalEntity(ctx context.Context, in *SignalEntityRequest, opts ...grpc.CallOption) (*SignalEntityResponse, error)
	// get information about a specific entity
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error)
	// query entities
	QueryEntities(ctx context.Context, in *QueryEntitiesRequest, opts ...grpc.CallOption) (*QueryEntitiesResponse, error)
	// clean entity storage
	CleanEntityStorage(ctx context.Context, in *CleanEntityStorageRequest, opts ...grpc.CallOption) (*CleanEntityStorageResponse, error)
}

type taskHubSidecarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskHubSidecarServiceClient(cc grpc.ClientConnInterface) TaskHubSidecarServiceClient {
	return &taskHubSidecarServiceClient{cc}
}

func (c *taskHubSidecarServiceClient) Hello(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) StartInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_StartInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_GetInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) RewindInstance(ctx context.Context, in *RewindInstanceRequest, opts ...grpc.CallOption) (*RewindInstanceResponse, error) {
	out := new(RewindInstanceResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_RewindInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) WaitForInstanceStart(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_WaitForInstanceStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) WaitForInstanceCompletion(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_WaitForInstanceCompletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) RaiseEvent(ctx context.Context, in *RaiseEventRequest, opts ...grpc.CallOption) (*RaiseEventResponse, error) {
	out := new(RaiseEventResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_RaiseEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) TerminateInstance(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error) {
	out := new(TerminateResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_TerminateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) SuspendInstance(ctx context.Context, in *SuspendRequest, opts ...grpc.CallOption) (*SuspendResponse, error) {
	out := new(SuspendResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_SuspendInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) ResumeInstance(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeResponse, error) {
	out := new(ResumeResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_ResumeInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) QueryInstances(ctx context.Context, in *QueryInstancesRequest, opts ...grpc.CallOption) (*QueryInstancesResponse, error) {
	out := new(QueryInstancesResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_QueryInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) PurgeInstances(ctx context.Context, in *PurgeInstancesRequest, opts ...grpc.CallOption) (*PurgeInstancesResponse, error) {
	out := new(PurgeInstancesResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_PurgeInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) GetWorkItems(ctx context.Context, in *GetWorkItemsRequest, opts ...grpc.CallOption) (TaskHubSidecarService_GetWorkItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskHubSidecarService_ServiceDesc.Streams[0], TaskHubSidecarService_GetWorkItems_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &taskHubSidecarServiceGetWorkItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskHubSidecarService_GetWorkItemsClient interface {
	Recv() (*WorkItem, error)
	grpc.ClientStream
}

type taskHubSidecarServiceGetWorkItemsClient struct {
	grpc.ClientStream
}

func (x *taskHubSidecarServiceGetWorkItemsClient) Recv() (*WorkItem, error) {
	m := new(WorkItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskHubSidecarServiceClient) CompleteActivityTask(ctx context.Context, in *ActivityResponse, opts ...grpc.CallOption) (*CompleteTaskResponse, error) {
	out := new(CompleteTaskResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_CompleteActivityTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) CompleteOrchestratorTask(ctx context.Context, in *OrchestratorResponse, opts ...grpc.CallOption) (*CompleteTaskResponse, error) {
	out := new(CompleteTaskResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_CompleteOrchestratorTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) CompleteEntityTask(ctx context.Context, in *EntityBatchResult, opts ...grpc.CallOption) (*CompleteTaskResponse, error) {
	out := new(CompleteTaskResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_CompleteEntityTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) CreateTaskHub(ctx context.Context, in *CreateTaskHubRequest, opts ...grpc.CallOption) (*CreateTaskHubResponse, error) {
	out := new(CreateTaskHubResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_CreateTaskHub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) DeleteTaskHub(ctx context.Context, in *DeleteTaskHubRequest, opts ...grpc.CallOption) (*DeleteTaskHubResponse, error) {
	out := new(DeleteTaskHubResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_DeleteTaskHub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) SignalEntity(ctx context.Context, in *SignalEntityRequest, opts ...grpc.CallOption) (*SignalEntityResponse, error) {
	out := new(SignalEntityResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_SignalEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*GetEntityResponse, error) {
	out := new(GetEntityResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_GetEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) QueryEntities(ctx context.Context, in *QueryEntitiesRequest, opts ...grpc.CallOption) (*QueryEntitiesResponse, error) {
	out := new(QueryEntitiesResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_QueryEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHubSidecarServiceClient) CleanEntityStorage(ctx context.Context, in *CleanEntityStorageRequest, opts ...grpc.CallOption) (*CleanEntityStorageResponse, error) {
	out := new(CleanEntityStorageResponse)
	err := c.cc.Invoke(ctx, TaskHubSidecarService_CleanEntityStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskHubSidecarServiceServer is the server API for TaskHubSidecarService service.
// All implementations must embed UnimplementedTaskHubSidecarServiceServer
// for forward compatibility
type TaskHubSidecarServiceServer interface {
	// Sends a hello request to the sidecar service.
	Hello(context.Context, *empty.Empty) (*empty.Empty, error)
	// Starts a new orchestration instance.
	StartInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	// Gets the status of an existing orchestration instance.
	GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	// Rewinds an orchestration instance to last known good state and replays from there.
	RewindInstance(context.Context, *RewindInstanceRequest) (*RewindInstanceResponse, error)
	// Waits for an orchestration instance to reach a running or completion state.
	WaitForInstanceStart(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	// Waits for an orchestration instance to reach a completion state (completed, failed, terminated, etc.).
	WaitForInstanceCompletion(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	// Raises an event to a running orchestration instance.
	RaiseEvent(context.Context, *RaiseEventRequest) (*RaiseEventResponse, error)
	// Terminates a running orchestration instance.
	TerminateInstance(context.Context, *TerminateRequest) (*TerminateResponse, error)
	// Suspends a running orchestration instance.
	SuspendInstance(context.Context, *SuspendRequest) (*SuspendResponse, error)
	// Resumes a suspended orchestration instance.
	ResumeInstance(context.Context, *ResumeRequest) (*ResumeResponse, error)
	QueryInstances(context.Context, *QueryInstancesRequest) (*QueryInstancesResponse, error)
	PurgeInstances(context.Context, *PurgeInstancesRequest) (*PurgeInstancesResponse, error)
	GetWorkItems(*GetWorkItemsRequest, TaskHubSidecarService_GetWorkItemsServer) error
	CompleteActivityTask(context.Context, *ActivityResponse) (*CompleteTaskResponse, error)
	CompleteOrchestratorTask(context.Context, *OrchestratorResponse) (*CompleteTaskResponse, error)
	CompleteEntityTask(context.Context, *EntityBatchResult) (*CompleteTaskResponse, error)
	// Deletes and Creates the necessary resources for the orchestration service and the instance store
	CreateTaskHub(context.Context, *CreateTaskHubRequest) (*CreateTaskHubResponse, error)
	// Deletes the resources for the orchestration service and optionally the instance store
	DeleteTaskHub(context.Context, *DeleteTaskHubRequest) (*DeleteTaskHubResponse, error)
	// sends a signal to an entity
	SignalEntity(context.Context, *SignalEntityRequest) (*SignalEntityResponse, error)
	// get information about a specific entity
	GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error)
	// query entities
	QueryEntities(context.Context, *QueryEntitiesRequest) (*QueryEntitiesResponse, error)
	// clean entity storage
	CleanEntityStorage(context.Context, *CleanEntityStorageRequest) (*CleanEntityStorageResponse, error)
	mustEmbedUnimplementedTaskHubSidecarServiceServer()
}

// UnimplementedTaskHubSidecarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskHubSidecarServiceServer struct {
}

func (UnimplementedTaskHubSidecarServiceServer) Hello(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) StartInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInstance not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) RewindInstance(context.Context, *RewindInstanceRequest) (*RewindInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewindInstance not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) WaitForInstanceStart(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForInstanceStart not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) WaitForInstanceCompletion(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForInstanceCompletion not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) RaiseEvent(context.Context, *RaiseEventRequest) (*RaiseEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaiseEvent not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) TerminateInstance(context.Context, *TerminateRequest) (*TerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateInstance not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) SuspendInstance(context.Context, *SuspendRequest) (*SuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendInstance not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) ResumeInstance(context.Context, *ResumeRequest) (*ResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeInstance not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) QueryInstances(context.Context, *QueryInstancesRequest) (*QueryInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInstances not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) PurgeInstances(context.Context, *PurgeInstancesRequest) (*PurgeInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeInstances not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) GetWorkItems(*GetWorkItemsRequest, TaskHubSidecarService_GetWorkItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWorkItems not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) CompleteActivityTask(context.Context, *ActivityResponse) (*CompleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteActivityTask not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) CompleteOrchestratorTask(context.Context, *OrchestratorResponse) (*CompleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteOrchestratorTask not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) CompleteEntityTask(context.Context, *EntityBatchResult) (*CompleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteEntityTask not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) CreateTaskHub(context.Context, *CreateTaskHubRequest) (*CreateTaskHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskHub not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) DeleteTaskHub(context.Context, *DeleteTaskHubRequest) (*DeleteTaskHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskHub not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) SignalEntity(context.Context, *SignalEntityRequest) (*SignalEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalEntity not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) GetEntity(context.Context, *GetEntityRequest) (*GetEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) QueryEntities(context.Context, *QueryEntitiesRequest) (*QueryEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEntities not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) CleanEntityStorage(context.Context, *CleanEntityStorageRequest) (*CleanEntityStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanEntityStorage not implemented")
}
func (UnimplementedTaskHubSidecarServiceServer) mustEmbedUnimplementedTaskHubSidecarServiceServer() {}

// UnsafeTaskHubSidecarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskHubSidecarServiceServer will
// result in compilation errors.
type UnsafeTaskHubSidecarServiceServer interface {
	mustEmbedUnimplementedTaskHubSidecarServiceServer()
}

func RegisterTaskHubSidecarServiceServer(s grpc.ServiceRegistrar, srv TaskHubSidecarServiceServer) {
	s.RegisterService(&TaskHubSidecarService_ServiceDesc, srv)
}

func _TaskHubSidecarService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).Hello(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_StartInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).StartInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_StartInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).StartInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_GetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_RewindInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewindInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).RewindInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_RewindInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).RewindInstance(ctx, req.(*RewindInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_WaitForInstanceStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).WaitForInstanceStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_WaitForInstanceStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).WaitForInstanceStart(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_WaitForInstanceCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).WaitForInstanceCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_WaitForInstanceCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).WaitForInstanceCompletion(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_RaiseEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaiseEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).RaiseEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_RaiseEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).RaiseEvent(ctx, req.(*RaiseEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_TerminateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).TerminateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_TerminateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).TerminateInstance(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_SuspendInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).SuspendInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_SuspendInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).SuspendInstance(ctx, req.(*SuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_ResumeInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).ResumeInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_ResumeInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).ResumeInstance(ctx, req.(*ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_QueryInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).QueryInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_QueryInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).QueryInstances(ctx, req.(*QueryInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_PurgeInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).PurgeInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_PurgeInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).PurgeInstances(ctx, req.(*PurgeInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_GetWorkItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWorkItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskHubSidecarServiceServer).GetWorkItems(m, &taskHubSidecarServiceGetWorkItemsServer{stream})
}

type TaskHubSidecarService_GetWorkItemsServer interface {
	Send(*WorkItem) error
	grpc.ServerStream
}

type taskHubSidecarServiceGetWorkItemsServer struct {
	grpc.ServerStream
}

func (x *taskHubSidecarServiceGetWorkItemsServer) Send(m *WorkItem) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskHubSidecarService_CompleteActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).CompleteActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_CompleteActivityTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).CompleteActivityTask(ctx, req.(*ActivityResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_CompleteOrchestratorTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchestratorResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).CompleteOrchestratorTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_CompleteOrchestratorTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).CompleteOrchestratorTask(ctx, req.(*OrchestratorResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_CompleteEntityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityBatchResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).CompleteEntityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_CompleteEntityTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).CompleteEntityTask(ctx, req.(*EntityBatchResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_CreateTaskHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).CreateTaskHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_CreateTaskHub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).CreateTaskHub(ctx, req.(*CreateTaskHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_DeleteTaskHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).DeleteTaskHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_DeleteTaskHub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).DeleteTaskHub(ctx, req.(*DeleteTaskHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_SignalEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).SignalEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_SignalEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).SignalEntity(ctx, req.(*SignalEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_QueryEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).QueryEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_QueryEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).QueryEntities(ctx, req.(*QueryEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHubSidecarService_CleanEntityStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanEntityStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHubSidecarServiceServer).CleanEntityStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskHubSidecarService_CleanEntityStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHubSidecarServiceServer).CleanEntityStorage(ctx, req.(*CleanEntityStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskHubSidecarService_ServiceDesc is the grpc.ServiceDesc for TaskHubSidecarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskHubSidecarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskHubSidecarService",
	HandlerType: (*TaskHubSidecarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _TaskHubSidecarService_Hello_Handler,
		},
		{
			MethodName: "StartInstance",
			Handler:    _TaskHubSidecarService_StartInstance_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _TaskHubSidecarService_GetInstance_Handler,
		},
		{
			MethodName: "RewindInstance",
			Handler:    _TaskHubSidecarService_RewindInstance_Handler,
		},
		{
			MethodName: "WaitForInstanceStart",
			Handler:    _TaskHubSidecarService_WaitForInstanceStart_Handler,
		},
		{
			MethodName: "WaitForInstanceCompletion",
			Handler:    _TaskHubSidecarService_WaitForInstanceCompletion_Handler,
		},
		{
			MethodName: "RaiseEvent",
			Handler:    _TaskHubSidecarService_RaiseEvent_Handler,
		},
		{
			MethodName: "TerminateInstance",
			Handler:    _TaskHubSidecarService_TerminateInstance_Handler,
		},
		{
			MethodName: "SuspendInstance",
			Handler:    _TaskHubSidecarService_SuspendInstance_Handler,
		},
		{
			MethodName: "ResumeInstance",
			Handler:    _TaskHubSidecarService_ResumeInstance_Handler,
		},
		{
			MethodName: "QueryInstances",
			Handler:    _TaskHubSidecarService_QueryInstances_Handler,
		},
		{
			MethodName: "PurgeInstances",
			Handler:    _TaskHubSidecarService_PurgeInstances_Handler,
		},
		{
			MethodName: "CompleteActivityTask",
			Handler:    _TaskHubSidecarService_CompleteActivityTask_Handler,
		},
		{
			MethodName: "CompleteOrchestratorTask",
			Handler:    _TaskHubSidecarService_CompleteOrchestratorTask_Handler,
		},
		{
			MethodName: "CompleteEntityTask",
			Handler:    _TaskHubSidecarService_CompleteEntityTask_Handler,
		},
		{
			MethodName: "CreateTaskHub",
			Handler:    _TaskHubSidecarService_CreateTaskHub_Handler,
		},
		{
			MethodName: "DeleteTaskHub",
			Handler:    _TaskHubSidecarService_DeleteTaskHub_Handler,
		},
		{
			MethodName: "SignalEntity",
			Handler:    _TaskHubSidecarService_SignalEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _TaskHubSidecarService_GetEntity_Handler,
		},
		{
			MethodName: "QueryEntities",
			Handler:    _TaskHubSidecarService_QueryEntities_Handler,
		},
		{
			MethodName: "CleanEntityStorage",
			Handler:    _TaskHubSidecarService_CleanEntityStorage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWorkItems",
			Handler:       _TaskHubSidecarService_GetWorkItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orchestrator_service.proto",
}
