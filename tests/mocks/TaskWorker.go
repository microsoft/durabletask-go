// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TaskWorker is an autogenerated mock type for the TaskWorker type
type TaskWorker struct {
	mock.Mock
}

type TaskWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskWorker) EXPECT() *TaskWorker_Expecter {
	return &TaskWorker_Expecter{mock: &_m.Mock}
}

// ProcessNext provides a mock function with given fields: _a0
func (_m *TaskWorker) ProcessNext(_a0 context.Context) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ProcessNext")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskWorker_ProcessNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessNext'
type TaskWorker_ProcessNext_Call struct {
	*mock.Call
}

// ProcessNext is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TaskWorker_Expecter) ProcessNext(_a0 interface{}) *TaskWorker_ProcessNext_Call {
	return &TaskWorker_ProcessNext_Call{Call: _e.mock.On("ProcessNext", _a0)}
}

func (_c *TaskWorker_ProcessNext_Call) Run(run func(_a0 context.Context)) *TaskWorker_ProcessNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TaskWorker_ProcessNext_Call) Return(_a0 bool, _a1 error) *TaskWorker_ProcessNext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskWorker_ProcessNext_Call) RunAndReturn(run func(context.Context) (bool, error)) *TaskWorker_ProcessNext_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *TaskWorker) Start(_a0 context.Context) {
	_m.Called(_a0)
}

// TaskWorker_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type TaskWorker_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TaskWorker_Expecter) Start(_a0 interface{}) *TaskWorker_Start_Call {
	return &TaskWorker_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *TaskWorker_Start_Call) Run(run func(_a0 context.Context)) *TaskWorker_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TaskWorker_Start_Call) Return() *TaskWorker_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *TaskWorker_Start_Call) RunAndReturn(run func(context.Context)) *TaskWorker_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StopAndDrain provides a mock function with given fields:
func (_m *TaskWorker) StopAndDrain() {
	_m.Called()
}

// TaskWorker_StopAndDrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAndDrain'
type TaskWorker_StopAndDrain_Call struct {
	*mock.Call
}

// StopAndDrain is a helper method to define mock.On call
func (_e *TaskWorker_Expecter) StopAndDrain() *TaskWorker_StopAndDrain_Call {
	return &TaskWorker_StopAndDrain_Call{Call: _e.mock.On("StopAndDrain")}
}

func (_c *TaskWorker_StopAndDrain_Call) Run(run func()) *TaskWorker_StopAndDrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskWorker_StopAndDrain_Call) Return() *TaskWorker_StopAndDrain_Call {
	_c.Call.Return()
	return _c
}

func (_c *TaskWorker_StopAndDrain_Call) RunAndReturn(run func()) *TaskWorker_StopAndDrain_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskWorker creates a new instance of TaskWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskWorker {
	mock := &TaskWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
